@page "/catalog"
@inject ApiClient Api
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

    <div class="searchArea">
        <fieldset>
            <legend>
                Search
                <small class="text-muted float-right">Find your perfect place</small>
            </legend>
            <div class="container">
                <div class='row'>
                    <div class="col-sm">
                        Locality: <input @bind="city" class="form-control" name="city" type="text" required minlength="3" placeholder="e.g. city name, country..." />
                    </div>
                    <div class="col-sm">
                        Type of estate:
                        <select @bind="type" class="form-control" name="estateType" required>
                            @foreach (var estateType in estateTypes)
                            {
                                <option value="@estateType">@estateType</option>
                            }
                        </select>
                    </div>

                    <div class="col-sm">
                        Type of payment:
                        <select class="form-control" name="paymentType">
                            <option value="rent">Rent</option>
                            <option value="forSale">For Sale</option>
                            <option value="exchange">Exchange</option>
                        </select>
                    </div>
                </div>
            </div>
            <br />
            <button class="btn btn-primary float-right" @onclick="Search">Search</button>
        </fieldset>
    </div>

    @if (_advertisements != null)
    {
        <div class="pagination-specific">
            <MudPagination Class="pagination" Color="Color.Primary" Count="@((_advertisements.Count + _pageSize - 1) / _pageSize)" SelectedChanged="OnPaginationPageChanged" />
        </div>

        <div id="searchResults">
            @foreach (var result in _paginatedResults)
            {
                <div class="jumbotron row searchResult" @onclick="() => SeeDetails(result.Resource.Id.Value)">
                    <div class="col-3">
                        <img class="img-thumbnail" src="data:@result.Thumbnail.MediaType;base64,@result.Thumbnail.Resource" />
                    </div>
                    <div class="col">
                        <strong><a href="Details/@result.Resource.Id">@result.Resource.Title</a></strong><br />
                        <ul>
                            <li>Valid to: @DateTime.Now.AddDays(2)</li>
                            <li>User: @result.Resource.UserName</li>
                            <li>Address: @result.Resource.EstateAddress</li>
                            <li>Price: $@result.Resource.Price</li>
                            <li>Provision: @result.Resource.Provision</li>
                            <li>Area: @result.Resource.EstateArea</li>
                            @foreach (var utility in result.Resource.Utilities)
                            {
                                <li>@utility</li>
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>

        <div class="pagination-specific">
            <MudPagination Class="pagination" Color="Color.Primary" Count="@((_advertisements.Count + _pageSize - 1) / _pageSize)" SelectedChanged="OnPaginationPageChanged" />
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }


@code {
    private List<AdvertisementRepresentation> _advertisements;
    private List<string> estateTypes = new List<string> { "room", "flat", "house" };
    private string type = "room";
    private string city = "";

    // pagination:
    private int _pageSize = 10;
    private List<AdvertisementRepresentation> _paginatedResults;

    protected override async Task OnInitializedAsync()
    {
        _advertisements = (List<AdvertisementRepresentation>) await Api.SearchAsync(null, null, 0);
        OnPaginationPageChanged(1);
    }

    private async void Search()
    {
        _advertisements = (List<AdvertisementRepresentation>) await Api.SearchAsync(city, type, 0);
        OnPaginationPageChanged(1);
    }

    private void SeeDetails(int id)
    {
        NavigationManager.NavigateTo("/Details/" + id);   
    }

    private void OnPaginationPageChanged(int pageIndex)
    {
        _paginatedResults = _advertisements.Chunk(_pageSize).Take(pageIndex).Last().ToList();
    }
}
